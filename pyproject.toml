[project]
name = "gs-madrona"
version = "0.0.3"
description = "A fork from the official Madrona. The fork will be used for Genesis's own Madrona integration."
readme = {file = "README.md", content-type = "text/markdown"}
license = { text = "MIT" }
maintainers = [
  {name = "Alexis Duburcq", email = "alexis.duburcq@gmail.com"},
  {name = "Hongyi Yu", email = "hongyi.yu@genesis-ai.company"},
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Multimedia :: Graphics :: 3D Rendering",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13"
]
keywords = ["rendering", "graphics", "3d", "vulkan", "visualization", "raytracing"]

[project.urls]
Repository = "https://github.com/Genesis-Embodied-AI/gs-madrona"

[build-system]
requires = ["scikit-build-core>=0.5.0", "nanobind>=1.3.2"]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
minimum-version = "0.11"
cmake.version = ">=3.26"
ninja.make-fallback = true
wheel.cmake = true
editable.verbose = true
editable.rebuild = false
editable.mode = "redirect"
build.verbose = true
install.strip = false
search.site-packages = true

[tool.scikit-build.cmake.define]
CMAKE_INSTALL_RPATH_USE_LINK_PATH = true
CMAKE_BUILD_WITH_INSTALL_RPATH = true
CMAKE_INSTALL_RPATH = '$ORIGIN'
CMAKE_DISABLE_FIND_PACKAGE_X11 = true
CMAKE_INTERPROCEDURAL_OPTIMIZATION = true
CMAKE_CXX_FLAGS_RELEASE = "-O3 -DNDEBUG -ffunction-sections -fdata-sections"
CMAKE_SHARED_LINKER_FLAGS_RELEASE = "-Wl,--gc-sections -Wl,--strip-all"

[tool.cibuildwheel]
# https://github.com/pypa/cibuildwheel/blob/main/docs/options.md
build-verbosity = 1
manylinux-x86_64-image = "manylinux_2_28"
build = ["cp310-manylinux_x86_64", "cp311-manylinux_x86_64", "cp312-manylinux_x86_64"]
config-settings = { "wheel.py-api" = "cp312" }

[[tool.cibuildwheel.overrides]]
# Nanobuild does not support Stable ABI for Python < 3.12
select = "cp3{10,11}-*"
config-settings = {}
repair-wheel-command = [
  "auditwheel repair --zip-compression-level=9 -w {dest_dir} {wheel}"
]

[tool.cibuildwheel.linux]
before-all = [
  'dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$(uname -m)/cuda-rhel8.repo',
  'dnf clean all',
  'dnf install -y --setopt=install_weak_deps=False cuda-nvrtc-devel-12-4 cuda-cudart-devel-12-4 cuda-libraries-devel-12-4',
  'dnf download cuda-nvcc-12-4',
  'rpm -ivh --nodeps cuda-nvcc-12-4-*.rpm',
]
repair-wheel-command = [
  "auditwheel repair --zip-compression-level=9 -w {dest_dir} {wheel}",
  "pipx run abi3audit --strict --report {wheel}",
]

[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET = "10.15"

[tool.isort]
force_single_line = true
force_sort_within_sections = true
lexicographical = true
single_line_exclusions = ["typing"]
order_by_type = false
group_by_package = true
line_length = 120
use_parentheses = true
multi_line_output = 3
include_trailing_comma = true

[tool.pyink]
line-length = 80
unstable = true
pyink-indentation = 2
pyink-use-majority-quotes = true
extend-exclude = '''(
  .ipynb$
)'''